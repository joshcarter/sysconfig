;;    Directories
;;
(defvar home-dir (concat (expand-file-name "~") "/"))
(defvar emacs-dir (concat home-dir "/Library/SysConfig/emacs"))

(push emacs-dir load-path)
(load-file (concat emacs-dir "/josh-addons.el"))

(require 'cl)
(menu-bar-mode nil)
(line-number-mode 1)
(setq column-number-mode t)


;; global key mappings
;; 
; looks better but doesn't appear to work: (global-set-key [(control c) (control b)] 'josh-buffer-menu)
(define-key global-map "\C-x\C-b" 'josh-buffer-menu)
(define-key global-map "\e#" 'replace-string)
(define-key global-map "\C-xz" 'repeat-complex-command)
(define-key global-map "\C-xc" 'compile)
;(define-key global-map "\C-x\C-c" 'compile)	; overrides emacs quit
(define-key global-map "\C-x`" 'next-error)
(define-key global-map "\C-x~" 'goto-line)
(define-key global-map [delete] 'delete-char)
(define-key global-map "\M-[" 'backward-paragraph)
(define-key global-map "\M-]" 'forward-paragraph)

;; gnuserv stuff
; (autoload 'gnuserv-start "gnuserv-compat" "Allow this Emacs process to be a server for client processes." t)
; (gnuserv-start)
; (setq gnuserv-frame (selected-frame))

; swiped from http://www.dotemacs.de/dotfiles/JayakrishnanNair.emacs.html
(global-set-key "`" 'match-paren)
(defun match-paren (arg)
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))

; sentence ending stuff
(setq sentence-end "[.?!][]\"')]*\\($\\|\t\\| \\)[ \t\n]*")
(setq sentence-end-double-space nil)

;; clojure mode
;;
; (load-file (concat emacs-dir "/josh-clojure.el"))

;; cc mode
;;
(require 'cc-mode)
(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode" t)

(setq auto-mode-alist
       (append
         '(("\\.C$"  . c++-mode)
           ("\\.H$"  . c++-mode)
           ("\\.cc$" . c++-mode)
           ("\\.cpp$" . c++-mode)
           ("\\.hh$" . c++-mode)
           ("\\.c$"  . c-mode)
           ("\\.h$"  . c++-mode)
          ) auto-mode-alist))

;; don't truncate the end of lines with multiple vert windows
(setq truncate-partial-width-windows nil)

(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook
  (function (lambda ()
    "jet's additions to text-mode"
    (setq tab-width 2)
    (turn-on-auto-fill))))

(nconc c-style-alist
  '(("josh"
     (c-basic-offset . 4)
     (c-tab-always-indent . nil)
     (c-hanging-comment-ender-p . nil)
     (c-offsets-alist . (
			 (case-label . +2)
			 (access-label . -2)
			 (label . 0)
			 (defun-block-intro . +)
			 (statement-block-intro . +)
			 (statement-case-intro . +2)
			 (statement-case-open . +2)
			 (substatement-open . 0)
			 (inline-open . 0)
			 (block-open . -)
			 (brace-list-intro . 0)
			 (brace-list-entry . +))))))

(defun c-semi&comma-no-newlines-before-nonblanks ()
  (save-excursion
    (if (and (eq last-command-char ?\;)
             (zerop (forward-line 1))
             (not (looking-at "^[ \t]*$")))
        'stop
      nil)))

; customize auto newline mode
(setq c-hanging-semi&comma-criteria
      (list 'c-semi&comma-no-newlines-before-nonblanks
			'c-semi&comma-inside-parenlist
			'c-semi&comma-no-newlines-for-oneline-inliners))

(defun flip-c-style-hook ()
  (c-set-style "josh")
  (setq c-auto-newline nil)
  (turn-on-auto-fill)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)      ; only use spaces
  (setq c-tab-always-indent nil)
  (setq comment-multi-line t)
  (setq c-comment-continuation-stars "* ")
  (define-key c-mode-base-map "\C-m" 'c-context-line-break)
)
(add-hook 'c-mode-common-hook 'flip-c-style-hook)

; unused right now. swiped from:
; http://www.dotemacs.de/dotfiles/JackRepenning.emacs.html
(c-add-style "java-pure-block-aligned"
             (list '(c-basic-offset . 4)
                   '(c-comment-only-line-offset 0 . 0)
                   '(c-hanging-comment-starter-p . t)
                   (list 'c-offsets-alist
                         '(access-label . 0)
                         '(arglist-close . c-lineup-arglist)
                         '(arglist-intro . c-lineup-arglist-intro-after-paren)
                         '(block-close . 0)
                         '(class-open . +)
                         '(class-close . +)
                         '(defun-block-intro . 0)
                         '(func-decl-cont . c-lineup-java-throws)
                         '(inher-cont . c-lineup-java-inher)
                         '(inline-open . +)
                         '(knr-argdecl-intro . 5)
                         '(label . 0)
                         '(statement-block-intro . 0)
                         '(statement-case-open . +)
                         '(statement-cont . +)
                         '(substatement-open . +)
                         '(topmost-intro . -)
                         '(topmost-intro-cont . +)
                         )))

(c-add-style "java-josh"
             (list '(c-basic-offset . 4)
                   '(c-comment-only-line-offset 0 . 0)
                   '(c-hanging-comment-starter-p . t)
                   (list 'c-offsets-alist
                         '(access-label . 0)
                         '(arglist-close . c-lineup-arglist)
                         '(arglist-intro . c-lineup-arglist-intro-after-paren)
                         '(block-close . 0)
                         '(class-open . 0)
                         '(class-close . 0)
                         '(defun-block-intro . +)
                         '(func-decl-cont . c-lineup-java-throws)
                         '(inher-cont . c-lineup-java-inher)
                         '(inline-open . 0)
                         '(knr-argdecl-intro . 5)
                         '(label . 0)
                         '(statement-block-intro . +)
                         '(statement-case-open . +)
                         '(statement-cont . +)
                         '(substatement-open . 0)
                         '(topmost-intro . 0)
                         '(topmost-intro-cont . +)
                         )))

(defun flip-java-style-hook ()
  (c-set-style "java-josh")
  (setq c-auto-newline t)
  (turn-on-auto-fill)
  (setq tab-width 4)
  (setq c-tab-always-indent nil)
  (setq comment-multi-line t)
  (setq c-comment-continuation-stars "* ")
)
(add-hook 'java-mode-hook 'flip-java-style-hook)

(custom-set-variables
 '(font-lock-maximum-decoration nil)
 '(widget-use-overlay-change t)
 '(w3-user-colors-take-precedence t))
(custom-set-faces)

;; cribbed from http://www.tardis.ed.ac.uk/~skx/win/.emacs
;;;;;;;;;;;;;
;;
;;  Make sure that backups only happen in the directory ~/Backup
;; This is a dead handy piece of code.
;;
;;
;; (fset 'orthodox-make-backup-file-name
;;       (symbol-function 'make-backup-file-name))
;;
;; (defun make-bak (file)
;;   "Intended for (fset 'make-backup-file-name 'make-bak)."
;;   (let* ((file-dir (abbreviate-file-name (or (file-name-directory file)
;;                               default-directory)))
;;       ;; Using default-directory is necessary there because
;;       ;; 'file-name-directory returns nil on a relative path. I assume
;;       ;; this is why orthodox (find-backup-file-name "gug") fails.
;;       (backup-dir (concat (getenv "HOME") "/Backup/")))
;;     (or (file-directory-p backup-dir)
;;      (make-directory backup-dir)
;;      ;; Creating parents shouldn't be necessary, so it's better not to
;;      ;; enable it; if 'make-directory barfs then something's wrong.
;;      )
;;     (concat backup-dir (file-name-nondirectory file))))
;;
;; (defun bak-p (file)
;;   "Intended for (fset 'backup-file-name-p 'bak-p)."
;;   ;; Dired.el[2040] v19.34.1 doesn't call backup-file-name-p
;;   ;; unless the final char of the file name looks like it
;;   ;; might be appropriate for that; this is claimed needed
;;   ;; for efficiency. Therefore, some dired functions won't
;;   ;; work right with the new format. Egrep reveals no
;;   ;; other grief, & I've never used those dired functions.
;;   (string-match "Bak[/\\]" file))
;;
;; (fset 'make-backup-file-name 'make-bak)
;; (fset 'backup-file-name-p 'bak-p) 

;; from http://bc.tech.coop/blog/080128.html
(defconst use-backup-dir t)   
(setq backup-directory-alist (quote ((".*" . "~/Backup/")))
      version-control t                ; Use version numbers for backups
      kept-new-versions 2              ; Number of newest versions to keep
      kept-old-versions 2              ; Number of oldest versions to keep
      delete-old-versions t            ; Delete excess backup versions
      history-delete-duplicates t      ; Delete dups in history
      history-length 100               ; Larger history size than default 30
      inhibit-splash-screen t          ; No initial splash screen
      dired-listing-switches "-l"      ; Don't display dot files
      dired-recursive-deletes 'top     ; Recursive deletes
      dired-recursive-copies 'top      ; Recursive copies
      backup-by-copying-when-linked t) ; Copy linked files, don't rename
